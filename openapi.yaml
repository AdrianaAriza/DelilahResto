openapi: 3.0.1
info:
  title: Delilah Resto
  description: API Restaurant.
  contact:
    email: a-d-r-u@hotmail.com
  version: 1.0.0
externalDocs:
  description: Github Repository
  url: 'https://github.com/AdrianaAriza/DelilahResto'
servers:
  - url: 'https://localhost:3000'
  - url: 'http://localhost:3000'
tags:
  - name: User
    description: Requests related with Users
  - name: Products
    description: Requests related with Products
  - name: Orders
    description: Requests related with orders
paths:
  /users:
    post:
      tags:
        - User
      summary: Create user
      description: Creates a new User
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security: []
      responses:
        '200':
          description: Your account has been created
        '400':
          description: Error validating data
        '409':
          description: 'Username already exists, please use another'
        default:
          $ref: '#/components/responses/Default'
    get:
      tags:
        - User
      summary: Lists users (Admin).
      description: >-
        Gets a list of all users in the DataBase with corresponding information.
        You should have admin credentials to access it.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
    put:
      tags:
        - User
      summary: Updates user information.
      description: >-
        Updates user information. You can update all the information except your password. You can perform this request only if you want to update your own information or if you have an admin profile. 
      requestBody:
        description: Information to update
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User was modified correctly
        '400':
          description: Unauthorized - Invalid Token or password
  
        '404':
          description: User not found
        '409':
          description: Username/email already exists, use another
        default:
          $ref: '#/components/responses/Default'
    delete:
      tags:
        - User
      summary: Deletes user account (Admin)
      responses:
        '200':
          description: User {username} was deleted
        '404':
          description: User not found
        default:
          $ref: '#/components/responses/Default'
  /users/login:
    get:
      tags:
        - User
      security: []
      summary: Log in user into the API.
      parameters:
        - name: username or email
          in: query
          required: true
          schema:
            type: string
        - name: passworD
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid username/password supplied
        '401':
          description: Invalid request, user account disabled
        '422':
          description: mail/username and password are required
        default:
          $ref: '#/components/responses/Default'
  '/users/:{username}':
    get:
      tags:
        - User
      summary: Get user by user name (Admin)
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedAdmin'
        '404':
          description: User not found
        default:
          $ref: '#/components/responses/Default'
    put:
      tags:
        - User
      summary: Update by username (Admin)
      description: >-
        Edits a username fetched by its username (Admin Only). The full object
        can be sent or only the parameters needing to be modified.
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'User {username} was modified correctly'
        '401':
          $ref: '#/components/responses/UnauthorizedAdmin'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
    delete:
      tags:
        - User
      summary: Delete user (Admin)
      description: This can only be done by a logged in admin.
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'User {username} was disabled correctly'
        '401':
          $ref: '#/components/responses/UnauthorizedAdmin'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
  /products:
    get:
      tags:
        - Products
      summary: Get list of all available products
      description: Returns a list of products with corresponding information
      responses:
        '200':
          description: successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
    post:
      tags:
        - Products
      summary: Adds a new product (Admin)
      description: Adds a product to database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: New product added
        '400':
          description: Error validating input data
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Default'
  '/products/:{id}':
    get:
      tags:
        - Products
      summary: Gets product by Id
      description: 'Returns a specific product detail, fetched by it''s ID'
      parameters:
        - name: id
          in: path
          description: The ID of the product that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Error validating input data
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
    put:
      tags:
        - Products
      summary: UPdates a product by Id (Admin)
      description: Updates a specific product.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Data to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: 'Product with id {productId} has been modified'
        '400':
          description: Error validating input data
        '401':
          $ref: '#/components/responses/UnauthorizedAdmin'
        '404':
         description: No product found
        default:
          $ref: '#/components/responses/Default'
    delete:
      tags:
        - Products
      summary: Disables product by Id (Admin)
      description: 'Disables a specific product, fetched by it''s ID'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Product with id ${productId} was deleted'
        '401':
          $ref: '#/components/responses/UnauthorizedAdmin'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
  /orders:
    get:
      tags:
        - Orders
      summary: Get list of orders
      description: >-
        Returns a list of orders. You can only access to your own orders or if you are an admin you can access to all the ordesr.
      responses:
        '200':
          description: successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
    post:
      tags:
        - Orders
      summary: Adds a product
      description: Adds a product to database
      requestBody:
        description: Order to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
        required: true
      responses:
        '200':
          description: Order modified succesfully
        '400':
          description: Error validating input data
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Default'
  
  '/orders/:{id}':
    get:
      tags:
        - Orders
      summary: Gets product by Id (Admin)
      parameters:
        - name: id
          in: path
          description: The ID of the order that needs to be fetched.
          required: true
          schema:
            type: string
      description: 'Returns a specific product information'
      responses:
        '200':
          description: successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '401':
          $ref: '#/components/responses/UnauthorizedAdmin'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
    put:
      tags:
        - Orders
      summary: Gets product by Id (Admin)
      description: Edits a specific product
      parameters:
        - name: id
          in: path
          description: The ID of the order that needs to be fetched.
          required: true
          schema:
            type: string
      requestBody:
        description: Order to create
        content:
          application/json:
            schema:
              type: object
              properties:
                orderStatus:
                  type: string
                  example: delivered
        required: true
      responses:
        '200':
          description: 'Product with id {productId} modified correctly'
        '400':
          description: Error validating input data
        '401':
          $ref: '#/components/responses/UnauthorizedAdmin'
        '403':
          description: The state given for the product is not valid
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Default'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        username:
          type: string
          example: Camilo
        password:
          type: string
          example: camilo123
        email:
          type: string
          example: cam123@123.com
        delivery_address:
          type: string
          example: avenida 123
        full_name:
          type: string
          example: Camilo Ariza
        phone:
          type: integer
          example: 8565561
    UserInfo:
      type: array
      items:
        type: object
        properties:
          user_id:
            type: integer
            example: 1
          username:
            type: string
            example: Adriana
          full_name:
            type: string
            example: Adriana Ariza
          email:
            type: string
            example: a-d-r-u@hotmail.com
          phone:
            type: integer
            example: 5473214
          delivery_address:
            type: string
            example: calle123
          is_admin:
            type: boolean
            example: 1
          is_disabled:
            type: boolean
            example: 0
    Product:
      type: object
      properties:
        product_id:
          type: integer
          example: 2
        name:
          type: string
          example: Caldo de Costilla
        price:
          type: number
          example: 8000
        is_disabled:
          type: boolean
          example: 0
    Products:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    OrderProduct:
      type: object
      properties:
        order_prod_id:
          type: integer
          example: 16
        order_id:
          type: integer
          example: 15
        product_id:
          type: integer
          example: 4
        product_amount:
          type: integer
          example: 3
        name:
          type: string
          example: Hamburguesa Vegetariana
        price:
          type: number
          example: 25000
        is_disabled:
          type: boolean
          example: 0
    OrderProducts:
      type: array
      items:
        $ref: '#/components/schemas/OrderProduct'
    Order:
      type: object
      properties:
        order_id:
          type: integer
          example: 1
        status:
          type: string
          example: new
        date:
          type: string
          format: date-time
          example: '2020-10-11T10:11:12Z'
        description:
          type: string
          example: 1x Caldo de Costilla
        payment_method:
          type: string
          example: cash
        total:
          type: integer
          example: 8000
        user_id:
          type: integer
          example: 1
        username:
          type: string
          example: Adriana
        full_name:
          type: string
          example: Adriana Ariza
        email:
          type: string
          example: adr@123.com
        phone:
          type: integer
          example: 7562341
        delivery_address:
          type: string
          example: Calle123
        products:
          $ref: '#/components/schemas/OrderProducts'
    Orders:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    NewOrder:
      type: object
      properties:
        payment_method:
          type: string
          example: cash
        data:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
                example: 1
              amount:
                type: integer
                example: 3
    Token:
      type: object
      properties:
        token:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkFkcmlhbmEiLCJ1c2VyX2lkIjoxLCJpc19hZG1pbiI6MSwiaWF0IjoxNjAyNTU1NzUwfQ.mVPDaGykUv0hjE8oayxE3QRErnh-QW2QhW32HS-y7hk
    Error:
      type: object
      properties:
        error:
          type: string
          example: 'An error has ocurred: <error>'
      required:
        - error
    Send:
      type: string
      example: Error message
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Invalid Token
    Disabled:
      description: 'Invalid request, user account is disabled'
    NotAdmin:
      description: 'Operation forbidden, not an admin'
    NotFound:
      description: The specified resource was not found
    Default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Send'
          examples:
            Token Invalidation:
              summary: Unauthorized - Invalid Token
              value: Unauthorized - Invalid Token
            Disabled Account:
              summary: Unauthorized - Account is Disabled
              value: Unauthorized - User account is disabled
    UnauthorizedAdmin:
      description: Unauthorized
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Send'
          examples:
            Token Invalidation:
              summary: Unauthorized - Invalid Token
              value: Unauthorized - Invalid Token
            Disabled Account:
              summary: Unauthorized - Account is Disabled
              value: Unauthorized - User account is disabled
            Not Admin:
              summary: Unauthorized - Not an admin
              value: Unauthorized - Not an admin
